#!/usr/bin/env node
// Generated by CoffeeScript 1.3.1
(function() {
  var DEFAULT_FIXTURES, argv, createPlaybackServer, createRecordingProxyServer, fixtures, help, http, mock, options, port, target, targetHost, targetHostPort, targetPort, url, _;

  http = require('http');

  url = require('url');

  argv = require('optimist').argv;

  _ = require('underscore')._;

  mock = require('../lib/mock-http-server');

  createRecordingProxyServer = mock.createRecordingProxyServer, createPlaybackServer = mock.createPlaybackServer;

  DEFAULT_FIXTURES = 'fixtures';

  help = function() {
    console.log("Usage: mockserver port [options]");
    console.log("  Where port is to listen on for incoming requests");
    console.log("");
    console.log("Options:");
    console.log("  --record=host:port to record (optional)");
    console.log("       capture all requests and return results");
    console.log("       Note: when this flag is NOT set, mockserver");
    console.log("             will return previously recorded results and");
    console.log("             non-recorded requests will return a 404");
    console.log("  --fixtures=directory to store files relative to cwd (default ./" + DEFAULT_FIXTURES + ")");
    console.log("");
    console.log("Examples:");
    console.log("  mockserver 9000 --record=www.google.com:80 --fixtures=test");
    console.log("    Forward all requests to www.google.com and record results in ./test");
    console.log("  mockserver 9000 --fixtures=test");
    return console.log("    Reply to all requests with results recorded from target");
  };

  if (argv.help || argv._.length < 1) {
    help();
    process.exit(1);
  }

  port = parseInt(argv._[0]);

  if (!(port != null) || port === 0) {
    console.log("Error: must specify a port");
    help();
    process.exit(1);
  }

  fixtures = argv.fixtures || DEFAULT_FIXTURES;

  target = argv.record;

  options = {
    port: port,
    fixtures: fixtures
  };

  if (target != null) {
    targetHostPort = target.split(":");
    targetHost = targetHostPort[0];
    targetPort = (targetHostPort.length > 1 ? parseInt(targetHostPort[1]) : 80);
    console.log("Running in record mode");
    console.log("  Recording calls to " + target);
    options.target = {
      host: targetHost,
      port: targetPort
    };
    createRecordingProxyServer(options);
  } else {
    createPlaybackServer(options);
  }

  console.log("  Fixtures directory: ./" + fixtures);

  console.log("  Listening at http://localhost:" + port + "/");

}).call(this);
